---
import { getCollection } from "astro:content";

import { getNLastArticles } from "~/utils/getNLastArticles";
import { getCollectionFilter } from "~/utils/getCollectionFilter";
import TagPage from "~/layouts/TagPage/TagPage.astro";

export async function getStaticPaths() {
  const isDev = import.meta.env.DEV;

  const articleCollection = await getCollection("articles", ({ data, slug }) =>
    getCollectionFilter({
      lang: "en",
      slug,
      isDev,
      draft: data.draft,
    }),
  );

  const videoCollection = await getCollection("videos", ({ data, slug }) =>
    getCollectionFilter({
      lang: "en",
      slug,
      isDev,
      draft: data.draft,
    }),
  );

  // sort by date
  const articles = getNLastArticles(articleCollection, Infinity);
  const videos = getNLastArticles(videoCollection, Infinity);

  const allContent = [...articles, ...videos];

  const tagMap = allContent.reduce(
    (acc, item) => {
      const tags = item.data.tags || [];
      const collection = item.collection;

      for (const tag of tags) {
        if (!acc[tag]) {
          acc[tag] = { articles: [], videos: [] };
        }

        acc[tag][collection].push(item);
      }

      return acc;
    },
    {} as Record<
      string,
      {
        articles: typeof articles;
        videos: typeof videos;
      }
    >,
  );

  return Object.entries(tagMap).map(([tag, entries]) => ({
    params: {
      tag: tag.split(" ").join("-").toLowerCase(),
    },
    props: { articles: entries.articles, videos: entries.videos, tag },
  }));
}
---

<TagPage {...Astro.props} />
